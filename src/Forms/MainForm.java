package Forms;


import Utilities.ReadAutocadFile;
import Utilities.Constants;
import Utilities.SQLiteDbManager;
import Entities.Material;
import Entities.AccessPointModel;
import Utilities.PathLossModels;
import java.awt.Color;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.File;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.stream.Stream;
import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.commons.io.FilenameUtils;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author ALI
 */
public class MainForm extends javax.swing.JFrame {
    
    private File workingFile = null;
    
    // Obstacle Materials List
    private ArrayList<Material> materials = new ArrayList<Material>();
    
    // AP models List
    private ArrayList<AccessPointModel> apModels = new ArrayList<AccessPointModel>();
    
    // SQLite Query Result reader
    private ResultSet resultSet;
    
    private PanelObstacle pObstacle = new PanelObstacle();
    
    private PanelAP pAP = new PanelAP();
    
    private PanelSignal pSignal = new PanelSignal();
    
    private ButtonGroup group = new ButtonGroup();
    private ButtonGroup deviceGroup = new ButtonGroup();
    
    private JFileChooser fileChooser;

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {
            JOptionPane.showMessageDialog(this,e.toString(), Constants.ERROR,JOptionPane.WARNING_MESSAGE);
        }
        initComponents();
        pHeatMap.setVisible(false);
        panelProperties.setPreferredSize(new Dimension(panelProperties.getWidth(), 65));
        group.add(btAP);
        group.add(btObstacle);
        group.add(btWifi);
        group.add(btSelect);
        deviceGroup.add(btnMobile);
        deviceGroup.add(btnLaptop);
        panelProperties.add(pObstacle);
        panelProperties.add(pAP);
        panelProperties.add(pSignal);
        pSignal.setVisible(false);
        pObstacle.setVisible(false);
        pAP.setVisible(false);
        fillMaterialsList();
        fillAPModelsList();
        canvas.setMaterial(materials.get(0));
        canvas.setAPModel(apModels.get(0));
    }
    
    public void fillMaterialsList(){
        materials.clear();
        pObstacle.cmbMaterial.removeAllItems();
        try
        {
            resultSet = SQLiteDbManager.executeReader(SQLiteDbManager.connect(), "SELECT * FROM MATERIAL");
            while (resultSet.next()){
                int [] rgb = Stream.of(resultSet.getString("Color").split(",")).mapToInt(Integer::parseInt).toArray() ;
                materials.add(new Material(resultSet.getInt("ID"), resultSet.getString("Material_Name"), resultSet.getFloat("Attenuation"),
                new Color(rgb[0], rgb[1], rgb[2])));
            }
            pObstacle.cmbMaterial.setModel(new DefaultComboBoxModel(materials.toArray()));
        }catch (Exception ex){
            ex.printStackTrace();
        }
    }
    
    private void fillAPModelsList(){
        apModels.clear();
        pAP.cmbAPModel.removeAllItems();
        try
        {
            resultSet = SQLiteDbManager.executeReader(SQLiteDbManager.connect(), "SELECT * FROM Access_Point");
            while (resultSet.next()){
                apModels.add(new AccessPointModel(resultSet.getInt("ID"), resultSet.getString("Model"), resultSet.getString("Brand"),
                        resultSet.getFloat("Emission_Power"), resultSet.getFloat("Path_Loss_1M")));
            }
            pAP.cmbAPModel.setModel(new DefaultComboBoxModel(apModels.toArray()));
        }catch (Exception ex){
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelTools = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tfScale = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btSetScale = new javax.swing.JButton();
        btObstacle = new javax.swing.JToggleButton();
        btAP = new javax.swing.JToggleButton();
        btDelete = new javax.swing.JButton();
        btWifi = new javax.swing.JToggleButton();
        btClear = new javax.swing.JButton();
        btSelect = new javax.swing.JToggleButton();
        btInsertBG = new javax.swing.JButton();
        btHeatMap = new javax.swing.JButton();
        btOptimalLoc = new javax.swing.JButton();
        btnMobile = new javax.swing.JToggleButton();
        btnLaptop = new javax.swing.JToggleButton();
        btClearHeatMap = new javax.swing.JButton();
        btClearObstacles = new javax.swing.JButton();
        btClearAPs = new javax.swing.JButton();
        panelProperties = new javax.swing.JPanel();
        pHeatMap = new Forms.PanelHeatMap();
        jScrollPane1 = new javax.swing.JScrollPane();
        canvas = new Forms.Canvas(this);
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuItemNew = new javax.swing.JMenuItem();
        menuItemOpen = new javax.swing.JMenuItem();
        menuItemSave = new javax.swing.JMenuItem();
        menuItemSaveAs = new javax.swing.JMenuItem();
        mImportCAD = new javax.swing.JMenuItem();
        miExportImage = new javax.swing.JMenuItem();
        menuItemExit = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();
        menuItemSettings = new javax.swing.JMenuItem();
        menuMaterial = new javax.swing.JMenu();
        miNewMaterial = new javax.swing.JMenuItem();
        menuAP = new javax.swing.JMenu();
        miNewModel = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Wifi Planning Tool");
        setExtendedState(6);
        setMinimumSize(new java.awt.Dimension(865, 575));
        setState(3);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        panelTools.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        panelTools.setPreferredSize(new java.awt.Dimension(150, 46));

        jLabel1.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12)); // NOI18N
        jLabel1.setText("Scale:");

        tfScale.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12)); // NOI18N
        tfScale.setText("50");

        jLabel2.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12)); // NOI18N
        jLabel2.setText("cm");

        btSetScale.setText("Set");
        btSetScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSetScaleActionPerformed(evt);
            }
        });

        btObstacle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/btWall.png"))); // NOI18N
        btObstacle.setToolTipText("Draw Obstacle/Wall");
        btObstacle.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                btObstacleItemStateChanged(evt);
            }
        });
        btObstacle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btObstacleActionPerformed(evt);
            }
        });

        btAP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/ic_ap.png"))); // NOI18N
        btAP.setToolTipText("Set Access Point");
        btAP.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                btAPItemStateChanged(evt);
            }
        });

        btDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/ic_delete.png"))); // NOI18N
        btDelete.setToolTipText("Delete Obstacle/AP");
        btDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteActionPerformed(evt);
            }
        });

        btWifi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/ic_wifi.png"))); // NOI18N
        btWifi.setToolTipText("Estimate received power at specific point");
        btWifi.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                btWifiItemStateChanged(evt);
            }
        });

        btClear.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12)); // NOI18N
        btClear.setText("Clear All");
        btClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btClearActionPerformed(evt);
            }
        });

        btSelect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/ic_select.png"))); // NOI18N
        btSelect.setToolTipText("Select/Move Obstacle or AP");
        btSelect.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                btSelectItemStateChanged(evt);
            }
        });

        btInsertBG.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 10)); // NOI18N
        btInsertBG.setText("Insert Background Image");
        btInsertBG.setIconTextGap(0);
        btInsertBG.setMargin(new java.awt.Insets(4, 2, 4, 2));
        btInsertBG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btInsertBGActionPerformed(evt);
            }
        });

        btHeatMap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/ic_heatmap.png"))); // NOI18N
        btHeatMap.setToolTipText("Draw heat map");
        btHeatMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btHeatMapActionPerformed(evt);
            }
        });

        btOptimalLoc.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 10)); // NOI18N
        btOptimalLoc.setText("Find Optimal Location");
        btOptimalLoc.setIconTextGap(0);
        btOptimalLoc.setMargin(new java.awt.Insets(4, 2, 4, 2));
        btOptimalLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btOptimalLocActionPerformed(evt);
            }
        });

        btnMobile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/mobile.png"))); // NOI18N
        btnMobile.setSelected(true);

        btnLaptop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/laptop.png"))); // NOI18N
        btnLaptop.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                btnLaptopItemStateChanged(evt);
            }
        });

        btClearHeatMap.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12)); // NOI18N
        btClearHeatMap.setText("Clear Heat Map");
        btClearHeatMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btClearHeatMapActionPerformed(evt);
            }
        });

        btClearObstacles.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12)); // NOI18N
        btClearObstacles.setText("Clear All Obstacles");
        btClearObstacles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btClearObstaclesActionPerformed(evt);
            }
        });

        btClearAPs.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12)); // NOI18N
        btClearAPs.setText("Clear All APs");
        btClearAPs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btClearAPsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelToolsLayout = new javax.swing.GroupLayout(panelTools);
        panelTools.setLayout(panelToolsLayout);
        panelToolsLayout.setHorizontalGroup(
            panelToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelToolsLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(panelToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelToolsLayout.createSequentialGroup()
                        .addGroup(panelToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btSetScale, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelToolsLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfScale)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2))
                            .addGroup(panelToolsLayout.createSequentialGroup()
                                .addGroup(panelToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(panelToolsLayout.createSequentialGroup()
                                        .addComponent(btWifi, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(panelToolsLayout.createSequentialGroup()
                                        .addComponent(btObstacle, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btAP, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(22, 22, 22)
                                .addGroup(panelToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btHeatMap, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(5, 5, 5))
                    .addGroup(panelToolsLayout.createSequentialGroup()
                        .addGroup(panelToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(btInsertBG, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(btClear, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                                .addComponent(btOptimalLoc, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                                .addComponent(btClearAPs, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE))
                            .addGroup(panelToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(panelToolsLayout.createSequentialGroup()
                                    .addComponent(btnLaptop, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnMobile, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(btClearHeatMap, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btClearObstacles, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        panelToolsLayout.setVerticalGroup(
            panelToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelToolsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(tfScale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btSetScale)
                .addGap(18, 18, 18)
                .addGroup(panelToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btObstacle, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btAP, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btWifi, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btHeatMap, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btOptimalLoc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnMobile)
                    .addComponent(btnLaptop))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btInsertBG)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 94, Short.MAX_VALUE)
                .addComponent(btClearAPs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btClearObstacles)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btClearHeatMap)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btClear)
                .addContainerGap())
        );

        panelProperties.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        panelProperties.setMinimumSize(new java.awt.Dimension(616, 65));

        javax.swing.GroupLayout panelPropertiesLayout = new javax.swing.GroupLayout(panelProperties);
        panelProperties.setLayout(panelPropertiesLayout);
        panelPropertiesLayout.setHorizontalGroup(
            panelPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelPropertiesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pHeatMap, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelPropertiesLayout.setVerticalGroup(
            panelPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPropertiesLayout.createSequentialGroup()
                .addComponent(pHeatMap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );

        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout canvasLayout = new javax.swing.GroupLayout(canvas);
        canvas.setLayout(canvasLayout);
        canvasLayout.setHorizontalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1919, Short.MAX_VALUE)
        );
        canvasLayout.setVerticalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1079, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(canvas);

        jMenuBar1.setMinimumSize(new java.awt.Dimension(784, 24));
        jMenuBar1.setPreferredSize(new java.awt.Dimension(784, 24));

        menuFile.setText("File");

        menuItemNew.setText("New");
        menuItemNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemNewActionPerformed(evt);
            }
        });
        menuFile.add(menuItemNew);

        menuItemOpen.setText("Open");
        menuItemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemOpenActionPerformed(evt);
            }
        });
        menuFile.add(menuItemOpen);

        menuItemSave.setText("Save");
        menuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSaveActionPerformed(evt);
            }
        });
        menuFile.add(menuItemSave);

        menuItemSaveAs.setText("Save As");
        menuItemSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSaveAsActionPerformed(evt);
            }
        });
        menuFile.add(menuItemSaveAs);

        mImportCAD.setText("Import CAD File");
        mImportCAD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mImportCADActionPerformed(evt);
            }
        });
        menuFile.add(mImportCAD);

        miExportImage.setText("Export Image");
        miExportImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExportImageActionPerformed(evt);
            }
        });
        menuFile.add(miExportImage);

        menuItemExit.setText("Exit");
        menuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemExitActionPerformed(evt);
            }
        });
        menuFile.add(menuItemExit);

        jMenuBar1.add(menuFile);

        menuEdit.setText("Edit");

        menuItemSettings.setText("Settings");
        menuItemSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSettingsActionPerformed(evt);
            }
        });
        menuEdit.add(menuItemSettings);

        jMenuBar1.add(menuEdit);

        menuMaterial.setText("Material");

        miNewMaterial.setText("Add New");
        miNewMaterial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNewMaterialActionPerformed(evt);
            }
        });
        menuMaterial.add(miNewMaterial);

        jMenuBar1.add(menuMaterial);

        menuAP.setText("Access Point");

        miNewModel.setText("New Model");
        miNewModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNewModelActionPerformed(evt);
            }
        });
        menuAP.add(miNewModel);

        jMenuBar1.add(menuAP);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelTools, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelProperties, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelProperties, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(panelTools, javax.swing.GroupLayout.DEFAULT_SIZE, 533, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btObstacleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_btObstacleItemStateChanged
        // TODO add your handling code here:
        pHeatMap.setVisible(false);
        pAP.setVisible(false);
        setObstaclesPanelVisible(evt.getStateChange() == ItemEvent.SELECTED);
        canvas.setOperation(evt.getStateChange() == ItemEvent.SELECTED ? Constants.OPERATION_DRAW_LINE : Constants.OPERATION_SELECT);
        canvas.setAPModel(apModels.get(0));
    }//GEN-LAST:event_btObstacleItemStateChanged

    private void btAPItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_btAPItemStateChanged
        // TODO add your handling code here:
        pHeatMap.setVisible(false);
        pObstacle.setVisible(false);
        setPanelAPVisible(evt.getStateChange() == ItemEvent.SELECTED);
        canvas.setOperation(evt.getStateChange() == ItemEvent.SELECTED ? Constants.OPERATION_DRAW_AP : Constants.OPERATION_SELECT);
        pAP.tfAPName.setText(evt.getStateChange() == ItemEvent.SELECTED ? canvas.getAPName() : "");
    }//GEN-LAST:event_btAPItemStateChanged

    private void menuItemSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSaveAsActionPerformed
        // TODO add your handling code here:
        saveNew();
    }//GEN-LAST:event_menuItemSaveAsActionPerformed

    private void menuItemOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemOpenActionPerformed
        openSession();
    }//GEN-LAST:event_menuItemOpenActionPerformed

    private void btClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btClearActionPerformed
        // TODO add your handling code here:
        canvas.clearAll();
    }//GEN-LAST:event_btClearActionPerformed

    private void btWifiItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_btWifiItemStateChanged
        // TODO add your handling code here:
        pHeatMap.setVisible(false);
        pAP.setVisible(false);
        pObstacle.setVisible(false);
        setPanelSignalVisible(evt.getStateChange() == ItemEvent.SELECTED);
        canvas.setOperation(evt.getStateChange() == ItemEvent.SELECTED ? Constants.OPERATION_CALC_SIGNAL : Constants.OPERATION_SELECT);
    }//GEN-LAST:event_btWifiItemStateChanged

    private void btSelectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_btSelectItemStateChanged
        // TODO add your handling code here:
        pHeatMap.setVisible(false);
        pAP.setVisible(false);
        pObstacle.setVisible(false);
        canvas.setOperation(evt.getStateChange() == ItemEvent.SELECTED ? Constants.OPERATION_SELECT : 0);
    }//GEN-LAST:event_btSelectItemStateChanged

    private void btInsertBGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btInsertBGActionPerformed
        // TODO add your handling code here:
        fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("Image Files", "jpg", "png", "gif", "jpeg"));
        fileChooser.setFileFilter(new FileNameExtensionFilter("Image Files", "jpg", "png", "gif", "jpeg"));
        if (result == JFileChooser.APPROVE_OPTION){
            try{
                boolean drawGird = JOptionPane.showConfirmDialog (this, Constants.GRID_QUESTION,
                        "Grid",JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION;
                canvas.setBackgroundImage(ImageIO.read(fileChooser.getSelectedFile()), drawGird);
            }catch(Exception ex){
                System.err.println("can't load");
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_btInsertBGActionPerformed

    private void btDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteActionPerformed
        // TODO add your handling code here:
        canvas.deleteAPOrObstacle();
    }//GEN-LAST:event_btDeleteActionPerformed

    private void mImportCADActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mImportCADActionPerformed
        // TODO add your handling code here:
        fileChooser = new JFileChooser();
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            try{
                canvas.importCAD(ReadAutocadFile.getAutocadFileObstacles(fileChooser.getSelectedFile().getAbsolutePath()));
            }catch(Exception ex){
                System.err.println("can't load");
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_mImportCADActionPerformed

    private void miExportImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExportImageActionPerformed
        // TODO add your handling code here:
        fileChooser = new JFileChooser();
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION){
            try{
                ImageIO.write(canvas.getDrawingAsImage(), "PNG", new File(fileChooser.getSelectedFile().getAbsolutePath() + ".png"));
            }catch(Exception ex){
                
            }
        }
    }//GEN-LAST:event_miExportImageActionPerformed

    private void btSetScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSetScaleActionPerformed
        // TODO add your handling code here:
        canvas.setScale(Integer.parseInt(tfScale.getText()));
    }//GEN-LAST:event_btSetScaleActionPerformed

    private void menuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemExitActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_menuItemExitActionPerformed

    private void btHeatMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btHeatMapActionPerformed
        // TODO add your handling code here:
        pHeatMap.setMinThreshold(btnLaptop.isSelected() ? PathLossModels.MIN_THRESHOLDLAPTOP : PathLossModels.MIN_THRESHOLDMOBILE);
        pHeatMap.setVisible(true);
        pSignal.setVisible(false);
        pSignal.setVisible(false);
        pObstacle.setVisible(false);
        canvas.drawHeatMap(true);
    }//GEN-LAST:event_btHeatMapActionPerformed

    private void miNewMaterialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNewMaterialActionPerformed
        // TODO add your handling code here:
        NewMaterial newMaterial = new NewMaterial(this);
        newMaterial.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);
        if(newMaterial.showDialog())
            fillMaterialsList();
    }//GEN-LAST:event_miNewMaterialActionPerformed

    private void miNewModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNewModelActionPerformed
        // TODO add your handling code here:
        NewAP newAPModel = new NewAP(this);
        newAPModel.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);
        if(newAPModel.showDialog())
            fillAPModelsList();
    }//GEN-LAST:event_miNewModelActionPerformed

    private void btOptimalLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btOptimalLocActionPerformed
        // TODO add your handling code here:
        OptimalityProgress dialog = new OptimalityProgress(this, apModels.get(pAP.cmbAPModel.getSelectedIndex()), canvas);
        dialog.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);
        dialog.setVisible(true);
    }//GEN-LAST:event_btOptimalLocActionPerformed
/*
    private void btWifiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btWifiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btWifiActionPerformed

    private void btnMobileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMobileActionPerformed

    }//GEN-LAST:event_btnMobileActionPerformed

    private void btnLaptopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLaptopActionPerformed

    }//GEN-LAST:event_btnLaptopActionPerformed

    private void btAPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btAPActionPerformed
*/
    private void btClearHeatMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btClearHeatMapActionPerformed
        // TODO add your handling code here:
        canvas.drawHeatMap(false);
    }//GEN-LAST:event_btClearHeatMapActionPerformed

    private void btClearObstaclesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btClearObstaclesActionPerformed
        // TODO add your handling code here:
        canvas.clearObstacles();
    }//GEN-LAST:event_btClearObstaclesActionPerformed

    private void btClearAPsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btClearAPsActionPerformed
        // TODO add your handling code here:
        canvas.clearAccessPoints();
    }//GEN-LAST:event_btClearAPsActionPerformed

    private void menuItemSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSettingsActionPerformed
        // TODO add your handling code here:
        Settings settings = new Settings(this);
        settings.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);
        settings.setVisible(true);
    }//GEN-LAST:event_menuItemSettingsActionPerformed

    private void btnLaptopItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_btnLaptopItemStateChanged
        // TODO add your handling code here:
        Constants.isLaptop = btnLaptop.isSelected();
    }//GEN-LAST:event_btnLaptopItemStateChanged

    private void menuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSaveActionPerformed
        // TODO add your handling code here:
        saveCurrent();
    }//GEN-LAST:event_menuItemSaveActionPerformed

    private void menuItemNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemNewActionPerformed
        // TODO add your handling code here:
        saveOrDiscardChanges();
    }//GEN-LAST:event_menuItemNewActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if(saveOrDiscardChanges())
            this.dispose();
    }//GEN-LAST:event_formWindowClosing

    private void btObstacleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btObstacleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btObstacleActionPerformed
    
    private void saveCurrent(){
        if(workingFile == null){
            saveNew();
        }
        else{
            canvas.save(workingFile);
        }
    }
    
    private void saveNew(){
        JFileChooser chooser = new JFileChooser();
        if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            workingFile = chooser.getSelectedFile();
            canvas.save(workingFile);
        }
    }
    
    private boolean saveOrDiscardChanges(){
        if(Constants.isChanged){
            int confirm = JOptionPane.showConfirmDialog(this, Constants.SAVE_CHANGES_MSG, Constants.SAVE_CHANGES_TITLE, JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            switch(confirm){
                case JOptionPane.YES_OPTION:
                    saveCurrent();
                    break;
                case JOptionPane.NO_OPTION:
                    break;
                case JOptionPane.CANCEL_OPTION:
                    return false;
            }
        }
        canvas.clearAll();
        Constants.isChanged = false;
        workingFile = null;
        return true;
    }
    
    private void openSession(){
        if(saveOrDiscardChanges()){
            JFileChooser chooser = new JFileChooser();
            int r = chooser.showOpenDialog(null);
            if (r == JFileChooser.APPROVE_OPTION) {
                workingFile = chooser.getSelectedFile();
                if (FilenameUtils.getExtension(workingFile.getName()).equalsIgnoreCase("ser")) {
                    canvas.load(workingFile);
                } else {
                    JOptionPane.showMessageDialog(this, Constants.WRONG_FILE_FORMAT, Constants.ERROR,JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }
    
    public void setTFLength(String length){
        pObstacle.tfLength.setText(length);
    }
    
    public void setObstaclesPanelVisible(boolean isVisible){
        pObstacle.setBounds(2, 2, panelProperties.getWidth(), 60);
        pObstacle.setVisible(isVisible);
        pHeatMap.setVisible(false);
    }
    
    public void setPanelAPVisible(boolean isVisible){
        pAP.setBounds(2, 2, panelProperties.getWidth(), 60);
        pAP.setVisible(isVisible);
        pHeatMap.setVisible(false);
    }
    
    public void setSelectedMaterial(int index){
        pObstacle.cmbMaterial.setSelectedIndex(index);
    }
    
    public void setSelectedAPModel(int index){
        pAP.cmbAPModel.setSelectedIndex(index);
    }
    
    public void setTFAPName(String apName){
        pAP.tfAPName.setText(apName);
    }
    
    public void setPanelSignalVisible(boolean isVisible){
        pSignal.setBounds(2, 2, panelProperties.getWidth(), 60);
        pSignal.setVisible(isVisible);
        pHeatMap.setVisible(false);
    }
    
    public void setTFSignalText(String signal){
        pSignal.tfSignal.setText(signal);
    }
    
    public void setTFDistanceText(String distance){
        pSignal.tfDistance.setText(distance);
    }
    
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btAP;
    private javax.swing.JButton btClear;
    private javax.swing.JButton btClearAPs;
    private javax.swing.JButton btClearHeatMap;
    private javax.swing.JButton btClearObstacles;
    private javax.swing.JButton btDelete;
    private javax.swing.JButton btHeatMap;
    private javax.swing.JButton btInsertBG;
    private javax.swing.JToggleButton btObstacle;
    private javax.swing.JButton btOptimalLoc;
    private javax.swing.JToggleButton btSelect;
    private javax.swing.JButton btSetScale;
    private javax.swing.JToggleButton btWifi;
    private javax.swing.JToggleButton btnLaptop;
    private javax.swing.JToggleButton btnMobile;
    private Forms.Canvas canvas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem mImportCAD;
    private javax.swing.JMenu menuAP;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuItem menuItemExit;
    private javax.swing.JMenuItem menuItemNew;
    private javax.swing.JMenuItem menuItemOpen;
    private javax.swing.JMenuItem menuItemSave;
    private javax.swing.JMenuItem menuItemSaveAs;
    private javax.swing.JMenuItem menuItemSettings;
    private javax.swing.JMenu menuMaterial;
    private javax.swing.JMenuItem miExportImage;
    private javax.swing.JMenuItem miNewMaterial;
    private javax.swing.JMenuItem miNewModel;
    private Forms.PanelHeatMap pHeatMap;
    private javax.swing.JPanel panelProperties;
    private javax.swing.JPanel panelTools;
    private javax.swing.JTextField tfScale;
    // End of variables declaration//GEN-END:variables


    // <editor-fold defaultstate="collapsed" desc="Panels">      
    public class PanelObstacle extends javax.swing.JPanel {

    /**
     * Creates new form panelObstacle
     */
    public PanelObstacle() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {
            JOptionPane.showMessageDialog(this,e.toString(), Constants.ERROR,JOptionPane.WARNING_MESSAGE);
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        cmbMaterial = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        tfLength = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        
        setBackground(new Color(240, 240, 240));

        setMinimumSize(new java.awt.Dimension(693, 65));
        setPreferredSize(new java.awt.Dimension(693, 65));

        jLabel3.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12)); // NOI18N
        jLabel3.setText("Material:");

        cmbMaterial.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12)); // NOI18N
        cmbMaterial.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12)); // NOI18N
        jLabel4.setText("Lenght:");

        tfLength.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12)); // NOI18N
        jLabel5.setText("cm");
        
        tfLength.addKeyListener(new KeyAdapter() {

            @Override
            public void keyPressed(KeyEvent e) {
                super.keyPressed(e); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void keyTyped(KeyEvent e) {
                super.keyTyped(e); //To change body of generated methods, choose Tools | Templates.
                if (!e.isControlDown() && !Character.isDigit(e.getKeyChar()) && e.getKeyChar() != '.'){
                    e.consume();
                    Toolkit.getDefaultToolkit().beep();
                }
                // only allow one decimal point
                else if (e.getKeyChar() == '.' && tfLength.getText().indexOf('.') > -1){
                    e.consume();
                    Toolkit.getDefaultToolkit().beep();
                }
            }
        });
        
        cmbMaterial.addActionListener(new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                if(materials.size() > 0 && cmbMaterial.getItemCount() > 0)
                    canvas.setMaterial(materials.get(cmbMaterial.getSelectedIndex()));
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfLength, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addContainerGap(166, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cmbMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(tfLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        tfLength.setEnabled(false);
    }// </editor-fold>                        


    // Variables declaration - do not modify                     
    protected javax.swing.JComboBox cmbMaterial;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    protected javax.swing.JTextField tfLength;
    // End of variables declaration                   
}
    
    public class PanelAP extends javax.swing.JPanel {

    /**
     * Creates new form PanelAP
     */
    public PanelAP() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tfAPName = new javax.swing.JTextField();
        cmbAPModel = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(693, 65));

        jLabel1.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12)); // NOI18N
        jLabel1.setText("Model:");

        tfAPName.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12)); // NOI18N
        tfAPName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfAPNameKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfAPNameKeyTyped(evt);
            }
        });

        cmbAPModel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbAPModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAPModelActionPerformed(evt);
            }
        });

        tfAPName.setText("Access Point 0");
        jLabel2.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12)); // NOI18N
        jLabel2.setText("Name:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbAPModel, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfAPName, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbAPModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(tfAPName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap(33, Short.MAX_VALUE))
        );
    }// </editor-fold>                        

    private void tfAPNameKeyPressed(java.awt.event.KeyEvent evt) {                                    
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            canvas.setAPName(tfAPName.getText());
    }                                   

    private void tfAPNameKeyTyped(java.awt.event.KeyEvent evt) {                                  
        // TODO add your handling code here:
    }                                 

    private void cmbAPModelActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        if(apModels.size() > 0 && cmbAPModel.getItemCount() > 0)
                    canvas.setAPModel(apModels.get(cmbAPModel.getSelectedIndex()));
    }                                          


    // Variables declaration - do not modify                     
    private javax.swing.JComboBox cmbAPModel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField tfAPName;
    // End of variables declaration                   
    }
    
    public class PanelSignal extends javax.swing.JPanel {

    /**
     * Creates new form PanelSignal
     */
    public PanelSignal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        tfDistance = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfSignal = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(693, 65));
        setMinimumSize(new java.awt.Dimension(693, 65));

        jLabel1.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12)); // NOI18N
        jLabel1.setText("Distance:");

        tfDistance.setEditable(false);
        tfDistance.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12)); // NOI18N
        jLabel2.setText("cm");

        jLabel3.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12)); // NOI18N
        jLabel3.setText("Signal: ");

        tfSignal.setEditable(false);
        tfSignal.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 12)); // NOI18N
        jLabel4.setText("dBm");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfSignal, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addContainerGap(245, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfDistance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(tfSignal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap(36, Short.MAX_VALUE))
        );
    }// </editor-fold>                        


    // Variables declaration - do not modify                     
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField tfDistance;
    private javax.swing.JTextField tfSignal;
    // End of variables declaration                   
}
    // </editor-fold>      
    
}
